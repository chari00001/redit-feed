from fastapi import APIRouter, HTTPException, Depends, Query
from app.db import database
from app.models import Post, PostCreate, UserTagInteractionCreate
from app.enhanced_recommender import EnhancedRecommender
from typing import List, Optional
import json
from datetime import datetime, timedelta

router = APIRouter()

# Global enhanced model instance
recommender = EnhancedRecommender()

async def load_recommender_data(force_reload=False):
    """
    GeliÅŸmiÅŸ Ã¶neri modeli iÃ§in gerekli verileri yÃ¼kle ve modeli baÅŸlat
    """
    # Model zaten eÄŸitilmiÅŸse ve force_reload false ise erken Ã§Ä±k
    if recommender.feature_matrix is not None and not force_reload:
        return recommender
        
    print("ğŸš€ GeliÅŸmiÅŸ Ã¶neri sistemi yÃ¼kleniyor...")
        
    # GÃ¶nderileri Ã§ek
    posts_query = "SELECT * FROM posts ORDER BY created_at DESC"
    posts = await database.fetch_all(posts_query)
    posts_list = [dict(row) for row in posts]
    
    # Etiketleri JSON dizesinden listeye dÃ¶nÃ¼ÅŸtÃ¼r
    for post in posts_list:
        if isinstance(post.get("tags"), str):
            try:
                post["tags"] = json.loads(post["tags"])
            except:
                post["tags"] = []
    
    # Modeli eÄŸit (iÃ§erik analizi dahil)
    await recommender.fit(posts_list, use_content_analysis=True)
    
    # KullanÄ±cÄ± etkileÅŸimlerini yÃ¼kleme (bu artÄ±k fit iÃ§inde yapÄ±lÄ±yor)
    # await load_user_interactions() # Bu satÄ±r gereksiz
    
    print("âœ… GeliÅŸmiÅŸ Ã¶neri sistemi hazÄ±r!")
    return recommender

async def load_user_interactions():
    """
    KullanÄ±cÄ± etkileÅŸimlerini veritabanÄ±ndan yÃ¼kle
    """
    # Likes tablosundan etkileÅŸimleri Ã§ek
    likes_query = """
        SELECT user_id, post_id, 'like' as interaction_type, liked_at as timestamp
        FROM Likes
        ORDER BY liked_at DESC
    """
    likes = await database.fetch_all(likes_query)
    
    # Comments tablosundan etkileÅŸimleri Ã§ek
    comments_query = """
        SELECT user_id, post_id, 'comment' as interaction_type, created_at as timestamp
        FROM Comments
        ORDER BY created_at DESC
    """
    comments = await database.fetch_all(comments_query)
    
    # EtkileÅŸimleri modele yÃ¼kle
    for like in likes:
        recommender.update_user_interactions(
            user_id=like['user_id'],
            post_id=like['post_id'],
            interaction_type='like',
            weight=3.0
        )
    
    for comment in comments:
        recommender.update_user_interactions(
            user_id=comment['user_id'],
            post_id=comment['post_id'],
            interaction_type='comment',
            weight=4.0
        )
    
    print(f"âœ… {len(likes)} like ve {len(comments)} yorum etkileÅŸimi yÃ¼klendi.")

@router.post("/track-interaction")
async def track_interaction(user_id: int, post_id: int, interaction_type: str):
    """
    KullanÄ±cÄ± etkileÅŸimini kaydet ve Ã¶neri modelini gÃ¼ncelle
    """
    # Ã–neri modelini yÃ¼kle
    await load_recommender_data()
    
    # EtkileÅŸim aÄŸÄ±rlÄ±klarÄ±
    weights = {
        'view': 1.0,
        'like': 3.0,
        'comment': 4.0,
        'share': 5.0
    }
    
    weight = weights.get(interaction_type, 1.0)
    
    # Modeli gÃ¼ncelle
    recommender.update_user_interactions(
        user_id=user_id,
        post_id=post_id,
        interaction_type=interaction_type,
        weight=weight
    )
    
    return {
        "status": "success",
        "message": f"EtkileÅŸim kaydedildi: {interaction_type}",
        "user_id": user_id,
        "post_id": post_id,
        "weight": weight
    }

@router.get("/recommendations")
async def get_recommendations(user_id: int = Query(...), limit: int = 50):
    """
    KullanÄ±cÄ±ya kiÅŸiselleÅŸtirilmiÅŸ iÃ§erik Ã¶nerileri sunar
    """
    # Ã–neri modelini yÃ¼kle
    await load_recommender_data()
    
    # KullanÄ±cÄ±ya Ã¶zel Ã¶neriler yap
    recommendations = await recommender.recommend_for_user(
        user_id=user_id,
        top_n=limit,
        exclude_seen=True
    )
    
    return {
        "user_id": user_id,
        "recommendations": recommendations,
        "count": len(recommendations),
        "timestamp": datetime.now().isoformat()
    }

@router.get("/post-analysis/{post_id}")
async def get_post_analysis(post_id: int):
    """
    Belirli bir postun detaylÄ± analizini dÃ¶ndÃ¼rÃ¼r
    """
    await load_recommender_data()
    
    # Post analiz sonuÃ§larÄ±nÄ± al
    if post_id in recommender.post_analysis:
        analysis = recommender.post_analysis[post_id]
        return {
            "post_id": post_id,
            "analysis": analysis,
            "status": "analyzed"
        }
    else:
        # Post bulunamadÄ± veya analiz edilmemiÅŸ
        post_query = "SELECT * FROM posts WHERE id = :post_id"
        post = await database.fetch_one(post_query, {"post_id": post_id})
        
        if not post:
            raise HTTPException(status_code=404, detail="Post bulunamadÄ±")
        
        return {
            "post_id": post_id,
            "status": "not_analyzed",
            "message": "Bu post henÃ¼z analiz edilmemiÅŸ"
        }

@router.get("/similar-posts/{post_id}")
async def get_similar_posts(post_id: int, limit: int = Query(5, ge=1, le=20)):
    """
    Belirli bir posta benzer postlarÄ± dÃ¶ndÃ¼rÃ¼r
    """
    await load_recommender_data()
    
    similar = recommender.get_similar_posts(post_id, limit)
    
    if not similar:
        raise HTTPException(status_code=404, detail="Benzer post bulunamadÄ± veya post mevcut deÄŸil")
    
    return {
        "post_id": post_id,
        "similar_posts": similar,
        "count": len(similar)
    }

@router.get("/user-profile/{user_id}")
async def get_user_interest_profile(user_id: int):
    """
    KullanÄ±cÄ±nÄ±n ilgi profiline iliÅŸkin bir Ã¶zet dÃ¶ndÃ¼rÃ¼r.
    Veriyi doÄŸrudan user_tag_interactions tablosundan alÄ±r.
    """
    profile = await recommender.get_user_interest_profile(user_id)
    return profile

@router.get("/topics")
async def get_topics():
    """
    TÃ¼m konularÄ±n Ã¶zetini dÃ¶ndÃ¼rÃ¼r
    """
    await load_recommender_data()
    
    topics_summary = recommender.get_topics_summary()
    
    return topics_summary

@router.get("/topic-posts/{topic_id}")
async def get_topic_posts(topic_id: int, limit: int = Query(10, le=50)):
    """
    Belirli bir konudaki postlarÄ± dÃ¶ndÃ¼rÃ¼r
    """
    await load_recommender_data()
    
    topic_posts = recommender.get_topic_posts(topic_id, top_n=limit)
    
    return {
        "topic_id": topic_id,
        "posts": topic_posts,
        "count": len(topic_posts)
    }

@router.post("/analyze-new-posts")
async def analyze_new_posts():
    """
    Son 3 saatte eklenen yeni postlarÄ± analiz eder
    """
    # Son 3 saatteki postlarÄ± bul
    three_hours_ago = datetime.now() - timedelta(hours=3)
    
    new_posts_query = """
        SELECT * FROM posts 
        WHERE created_at >= :since_time
        ORDER BY created_at DESC
    """
    new_posts = await database.fetch_all(new_posts_query, {"since_time": three_hours_ago})
    new_posts_list = [dict(row) for row in new_posts]
    
    if not new_posts_list:
        return {
            "status": "no_new_posts",
            "message": "Son 3 saatte yeni post eklenmemiÅŸ",
            "analyzed_count": 0
        }
    
    # Etiketleri dÃ¼zenle
    for post in new_posts_list:
        if isinstance(post.get("tags"), str):
            try:
                post["tags"] = json.loads(post["tags"])
            except:
                post["tags"] = []
    
    # Yeni postlarÄ± mevcut sisteme ekle ve analiz et
    await load_recommender_data()
    
    # Mevcut postlarla birleÅŸtir
    all_posts = recommender.posts + new_posts_list
    
    # Modeli yeniden eÄŸit
    recommender.fit(all_posts, use_content_analysis=True)
    
    return {
        "status": "success",
        "message": "Yeni postlar analiz edildi",
        "analyzed_count": len(new_posts_list),
        "total_posts": len(all_posts),
        "timestamp": datetime.now().isoformat()
    }

@router.post("/retrain-model")
async def retrain_model():
    """
    Ã–neri modelini tÃ¼m verileri kullanarak yeniden eÄŸitir (gÃ¼nlÃ¼k eÄŸitim)
    """
    # Modeli zorla yeniden eÄŸit
    await load_recommender_data(force_reload=True)
    
    # Modelleri kaydet
    recommender.save_models()
    
    return {
        "status": "success",
        "message": "Model baÅŸarÄ±yla yeniden eÄŸitildi ve kaydedildi",
        "posts_count": len(recommender.posts),
        "features_count": recommender.feature_matrix.shape[1] if recommender.feature_matrix is not None else 0,
        "users_count": len(recommender.user_profiles),
        "topics_count": len(recommender.content_analyzer.cluster_keywords),
        "timestamp": datetime.now().isoformat()
    }

@router.get("/feed")
async def feed(user_id: int = Query(...), limit: int = 100):
    """
    KullanÄ±cÄ±ya kiÅŸiselleÅŸtirilmiÅŸ ana feed'i dÃ¶ndÃ¼rÃ¼r.
    Bu endpoint, `recommendations` ile aynÄ± mantÄ±ÄŸÄ± kullanÄ±r ancak
    genellikle daha fazla sayÄ±da sonuÃ§ dÃ¶ndÃ¼rÃ¼r.
    """
    # Ã–neri modelini yÃ¼kle ve kullanÄ±cÄ± profillerini hazÄ±rla
    await load_recommender_data()
    
    # KullanÄ±cÄ±ya Ã¶zel Ã¶neriler yap
    recommendations = await recommender.recommend_for_user(
        user_id=user_id,
        top_n=limit,
        exclude_seen=True
    )
    
    # EÄŸer hiÃ§ Ã¶neri yoksa, popÃ¼ler gÃ¶nderileri dÃ¶ndÃ¼r
    if not recommendations:
        recommendations = recommender._get_diversified_popular_posts(top_n=limit)

    return {
        "user_id": user_id,
        "feed": recommendations,
        "count": len(recommendations),
        "timestamp": datetime.now().isoformat()
    }

@router.post("/interact")
async def interact(interaction: UserTagInteractionCreate):
    """
    Eski etkileÅŸim endpoint'i (geriye uyumluluk iÃ§in)
    """
    return await track_interaction(
        user_id=interaction.user_id,
        post_id=1,  # VarsayÄ±lan post ID
        interaction_type=interaction.interaction_type
    ) 